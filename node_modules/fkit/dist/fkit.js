(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.F = {})));
}(this, (function (exports) { 'use strict';

function extend(target, objects) {
  objects.forEach(function (object) {
    Object.getOwnPropertyNames(object).forEach(function (property) {
      target[property] = object[property];
    });
  });
  return target;
}

var slice = Array.prototype.slice;

/**
 * This module defines basic operations on functions.
 *
 * @module fkit/fn
 * @summary Core Functions
 */

/**
 * Flattens the list of `as`.
 *
 * @private
 */
function flatten(as) {
  return as.reduce(function (a, b) {
    return a.concat(b);
  }, []);
}

/**
 * Returns the value `a` unchanged.
 *
 * @summary The identity function.
 *
 * @example
 *   F.id(1) // 1
 *
 * @param a A value.
 * @returns The value `a`.
 */
function id(a) {
  return a;
}

/**
 * Returns the result of the function `f` applied to the value `a`.
 *
 * @summary Applies a function to a value.
 *
 * @example
 *   function sayHi(a) { return ['Hi', a, '!'].join(' ') }
 *   F.apply(sayHi, 'Jane') // Hi Jane!
 *
 * @curried
 * @function
 * @param f A function.
 * @param a A value.
 * @returns The result of `f(a)`.
 */
var apply = curry(function (f, a) {
  return f(a);
});

/**
 * Returns the result of the function `f` applied to the values `a` and `b`.
 *
 * @summary Applies a function to two values.
 *
 * @example
 *   function sayHi(a, b) { return ['Hi', a, b, '!'].join(' ') }
 *   F.apply2(sayHi, 'Jane', 'Appleseed') // Hi Jane Appleseed!
 *
 * @curried
 * @function
 * @param f A function.
 * @param a A value.
 * @param b A value.
 * @returns The result of `f(a, b)`.
 */
var apply2 = curry(function (f, a, b) {
  return f(a, b);
});

/**
 * Returns the result of the function `f` applied to the values `a`, `b`, and
 * `c`.
 *
 * @summary Applies a function to three values.
 *
 * @example
 *   function sayHi(a, b, c) { return ['Hi', a, b, c, '!'].join(' ') }
 *   F.apply3(sayHi, 'Ms', 'Jane', 'Appleseed') // Hi Ms Jane Appleseed!
 *
 * @curried
 * @function
 * @param f A function.
 * @param a A value.
 * @param b A value.
 * @param c A value.
 * @returns The result of `f(a, b, c)`.
 */
var apply3 = curry(function (f, a, b, c) {
  return f(a, b, c);
});

/**
 * Returns the result of the function `f` applied to the value `a`.
 *
 * This is similar to `apply`, however the order of the arguments is flipped.
 *
 * @summary Applies a function to a value.
 *
 * @example
 *   function sayHi(a) { return ['Hi', a, '!'].join(' ') }
 *   F.applyRight('Jane', sayHi) // Hi Jane!
 *
 * @curried
 * @function
 * @param a A value.
 * @param f A function.
 * @returns The result of `f(a)`.
 */
var applyRight = curry(function (a, f) {
  return f(a);
});

/**
 * Returns a function that is the composition of the list of functions `fs`.
 *
 * @summary Composes a list of functions.
 *
 * @example
 *   F.compose(f, g, h)(a) // f(g(h(a)))
 *
 * @function
 * @param fs A list of functions.
 * @returns A new function.
 */
var compose = variadic(function (fs) {
  return function (a) {
    return fs.reduceRight(function (a, f) {
      return f(a);
    }, a);
  };
});

/**
 * Returns the result of applying the function `f` to the values `b` and `a`.
 *
 * @summary Flips the order of the arguments to a function.
 *
 * @example
 *   function f(a, b) { ... }
 *   var g = F.flip(f)
 *   g(1, 2) // f(2, 1)
 *
 * @function
 * @param f A function.
 * @param a A value.
 * @param b A value.
 * @returns A new function.
 */
var flip = curry(function (f, a, b) {
  return f(b, a);
});

/**
 * Returns a function that always returns the value `c`, regardless of the
 * arguments.
 *
 * @summary The constant function.
 *
 * @example
 *   F.always(1)(2, 3) // 1
 *
 * @param c A value.
 * @returns A new function.
 */
function always(a) {
  return function () {
    return a;
  };
}

/**
 * Returns a function that allows partial application of the arguments to the
 * function `f`.
 *
 * @summary Converts a function to a curried function.
 *
 * @example
 *   var add = F.curry(function(a, b) { return a + b })
 *   add(1)(2) // 3
 *
 * @param f A function.
 * @returns A new function.
 */
function curry(f) {
  var arity = f.length;

  var g = function g(oldArgs) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var newArgs = oldArgs.concat(args.length > 0 ? args : undefined);

      // If we have enough args, then apply the function.
      return newArgs.length >= arity ? f.apply(undefined, newArgs) : g(newArgs);
    };
  };

  return arity <= 1 ? f : g([]);
}

/**
 * Returns a function that wraps the binary function `f` to accept a pair.
 *
 * @summary Converts a binary function to a function on pairs.
 *
 * @example
 *   var add = F.uncurry(function(a, b) { return a + b })
 *   add([1, 2]) // 3
 *
 * @function
 * @param f A function.
 * @returns A new function.
 */
var uncurry = curry(function (f, p) {
  return f(p[0], p[1]);
});

/**
 * Returns a function that wraps the function `f` to accept only one argument.
 *
 * @summary Converts a function to a unary function.
 *
 * @param f A function.
 * @returns A new function.
 */
function unary(f) {
  return f.length === 1 ? f : apply(f);
}

/**
 * Returns a function that wraps the function `f` to accept only two arguments.
 *
 * @summary Converts a function to a binary function.
 *
 * @param f A function.
 * @returns A new function.
 */
function binary(f) {
  return f.length === 2 ? f : apply2(f);
}

/**
 * Returns a function that wraps the function `f` to accept any number of
 * arguments.
 *
 * The last named parameter will be given an array of arguments.
 *
 * @summary Converts a function to a variadic function.
 *
 * @example
 *   function f(head, tail) { ... }
 *   F.variadic(f)(1, 2, 3) // f(1, [2, 3])
 *
 * @param f A function.
 * @returns A new function.
 */
function variadic(f) {
  var _this = this;

  var arity = f.length;

  if (arity < 1) {
    return f;
  } else if (arity === 1) {
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var newArgs = args.length === 1 ? flatten(args) : args;

      return f.call(_this, newArgs);
    };
  } else {
    return function () {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var numMissingArgs = Math.max(arity - args.length - 1, 0);
      var missingArgs = new Array(numMissingArgs);
      var namedArgs = slice.call(args, 0, arity - 1);
      var variadicArgs = slice.call(args, f.length - 1);

      return f.apply(_this, namedArgs.concat(missingArgs).concat([variadicArgs]));
    };
  }
}

/**
 * Applies the function `f` to the value `a` and returns the value `a`
 * unchanged.
 *
 * @summary Applies a side-effecting function to a value.
 *
 * @example
 *   function f(a) { console.log(a) }
 *   F.tap(f)(1) // 1
 *
 * @curried
 * @function
 * @param f A function.
 * @param a A value.
 * @returns The value `a`.
 */
var tap = curry(function (f, a) {
  f(a);
  return a;
});

/**
 * Returns `true` if the value `a` is strictly equal (`===`) to the value `b`,
 * false otherwise.
 *
 * @summary The strict equality operator.
 *
 * @curried
 * @function
 * @param a A value.
 * @param b A value.
 * @returns A boolean value.
 */
var equal = curry(function (a, b) {
  return b === a;
});

/**
 * Returns `true` if the value `a` is strictly not equal (`!==`) to the value
 * `b`, false otherwise.
 *
 * @summary The strict inequality operator.
 *
 * @curried
 * @function
 * @param a A value.
 * @param b A value.
 * @returns A boolean value.
 */
var notEqual = curry(function (a, b) {
  return b !== a;
});

/**
 * Returns the ordering of the two values `a` and `b`.
 *
 * @summary Compares two values using natural ordering.
 *
 * @example
 *   F.compare(1, 2) // -1
 *   F.compare(2, 1) // 1
 *   F.compare(2, 2) // 0
 *
 * @curried
 * @function
 * @param a A value.
 * @param b A value.
 * @returns A number.
 */
var compare = curry(function (a, b) {
  if (a > b) {
    return 1;
  } else if (a < b) {
    return -1;
  } else {
    return 0;
  }
});

/**
 * This module defines basic operations on lists.
 *
 * @private
 * @module fkit/list/base
 */

/**
 * Returns true if `as` is an array.
 *
 * @private
 */
function isArray(as) {
  return Array.isArray(as);
}

/**
 * Returns true if `as` is a string or an array of strings.
 *
 * @private
 */
function isString(as) {
  return typeof as === 'string';
}

/**
 * Returns true if the list of `as` is an array of strings, false otherwise.
 *
 * @private
 */
function isArrayOfStrings(as) {
  return isArray(as) && as.length > 0 && as.reduce(function (a, b) {
    return a && isString(b);
  }, true);
}

/**
 * Returns an empty monoid of `as`.
 *
 * @private
 */
function mempty(as) {
  return isString(as) || isArrayOfStrings(as) ? '' : [];
}

/**
 * Returns `a` in a pure context.
 *
 * @private
 */
function pure(a) {
  return isString(a) || isArrayOfStrings(a) ? a : [a];
}

/**
 * Converts the list of `as` to an array.
 *
 * @private
 */
function toArray(as) {
  return isString(as) ? as.split('') : as;
}

/**
 * Converts the list of `as` to a list of type `t`.
 *
 * @private
 */
function toList(as, t) {
  return t === 'string' ? as.join('') : as;
}

/**
 * Returns the number of elements in the list of `as`.
 *
 * @summary Gets the length of a list.
 *
 * @example
 *   F.length([1, 2, 3]) // 3
 *   F.length('foo') // 3
 *
 * @param as A list.
 * @returns A number.
 */
function length(as) {
  return as.length;
}

/**
 * Returns `true` if the list of `as` is empty, `false` otherwise.
 *
 * @summary Determines if a list is empty.
 *
 * @example
 *   F.empty([]) // true
 *   F.empty([1, 2, 3]) // false
 *
 *   F.empty('') // true
 *   F.empty('foo') // false
 *
 * @param as A list.
 * @returns A boolean value.
 */
function empty(as) {
  return as.length === 0;
}

/**
 * Returns a list that contains the value `a` appended to the list of `bs`.
 *
 * @summary Appends a value to a list.
 *
 * @example
 *   F.append(3, [1, 2]) // [1, 2, 3]
 *   F.append('o', 'fo') // 'foo'
 *
 * @curried
 * @function
 * @param a A value.
 * @param bs A list.
 * @returns A new list.
 */
var append = curry(function (a, bs) {
  return isString(bs) ? bs + a : bs.concat([a]);
});

/**
 * Returns a list that contains the value `a` prepended to the list of `bs`.
 *
 * @summary Prepends a value to a list.
 *
 * @example
 *   F.prepend(1, [2, 3]) // [1, 2, 3]
 *   F.prepend('f', 'oo') // 'foo'
 *
 * @curried
 * @function
 * @param a A value.
 * @param bs A list.
 * @returns A new list.
 */
var prepend = curry(function (a, bs) {
  return isString(bs) ? a + bs : [a].concat(bs);
});

/**
 * Surrounds the list of `cs` with the values `a` and `b`.
 *
 * @example
 *   F.surround(0, 4, [1, 2, 3]) // [0, 1, 2, 3, 4]
 *   F.surround('(', ')', 'foo') // '(foo)'
 *
 * @curried
 * @function
 * @param a A value.
 * @param b A value.
 * @param cs A list.
 * @returns A new list.
 */
var surround = curry(function (a, b, cs) {
  return append(b, prepend(a, cs));
});

/**
 * Returns the first element in the list of `as`.
 *
 * @summary Gets the first element in a list.
 *
 * @example
 *   F.head([1, 2, 3]) // 1
 *   F.head('foo') // 'f'
 *
 * @param as A list.
 * @returns A value or `undefined` if the list is empty.
 */
function head(as) {
  return as[0];
}

/**
 * Returns the last element in the list of `as`.
 *
 * @summary Gets the last element in a list.
 *
 * @example
 *   F.last([1, 2, 3]) // 3
 *   F.last('foo') // 'o'
 *
 * @param as A list.
 * @returns A value or `undefined` if the list is empty.
 */
function last(as) {
  return as[as.length - 1];
}

/**
 * Returns a list that contains the elements before the last element in the
 * list of `as`.
 *
 * @summary Gets the elements before the last element in a list.
 *
 * @example
 *   F.init([1, 2, 3]) // [1, 2]
 *   F.init('foo') // 'fo'
 *
 * @param as A list.
 * @returns A new list.
 */
function init(as) {
  return as.slice(0, as.length - 1);
}

/**
 * Returns a list that contains the elements after the first element in the
 * list of `as`.
 *
 * @summary Get the elements after the first element in a list.
 *
 * @example
 *   F.tail([1, 2, 3]) // [2, 3]
 *   F.tail('foo') // 'oo'
 *
 * @param as A list.
 * @returns A new list.
 */
function tail(as) {
  return as.slice(1);
}

/**
 * Returns a list that contains all initial segments of the list of `as`.
 *
 * @summary Gets all initial segments of a list.
 *
 * @example
 *   F.inits([1, 2, 3]) // [[], [1], [1, 2], [1, 2, 3]]
 *   F.inits('foo') // ['', 'f', 'fo', 'foo']
 *
 * @param as A list.
 * @returns A new list.
 */
function inits(as) {
  return prepend(mempty(as), empty(as) ? [] : inits(tail(as)).map(prepend(head(as))));
}

/**
 * Returns a list that contains all final segments of the list of `as`.
 *
 * @summary Gets all final segments of a list.
 *
 * @example
 *   F.tails([1, 2, 3]) // [[1, 2, 3], [2, 3], [3], []]
 *   F.tails('foo') // ['foo', 'oo', 'o', '']
 *
 * @param as A list.
 * @returns A new list.
 */
function tails(as) {
  return prepend(as, empty(as) ? [] : tails(tail(as)));
}

/**
 * This module defines math functions.
 *
 * @module fkit/math
 * @summary Yay, Numbers!
 */

/**
 * Returns the result of `b + a`.
 *
 * @summary The addition operator.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A number.
 */
var add = curry(function (a, b) {
  return b + a;
});

/**
 * Returns the result of `b - a`.
 *
 * @summary The subtraction operator.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A number.
 */
var sub = curry(function (a, b) {
  return b - a;
});

/**
 * Returns the result of `b * a`.
 *
 * @summary The multiplication operator.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A number.
 */
var mul = curry(function (a, b) {
  return b * a;
});

/**
 * Returns the result of `b / a`.
 *
 * @summary The division operator.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A number.
 */
var div = curry(function (a, b) {
  return b / a;
});

/**
 * Returns the result of `b % a`.
 *
 * @summary The modulo operator.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A number.
 */
var mod = curry(function (a, b) {
  return b % a;
});

/**
 * Returns the largest of the numbers `a` and `b`.
 *
 * @summary Determines the largest of two numbers.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A number.
 */
var max = curry(function (a, b) {
  return b > a ? b : a;
});

/**
 * Returns the smallest of the numbers `a` and `b`.
 *
 * @summary Determines the smallest of two numbers.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A number.
 */
var min = curry(function (a, b) {
  return a > b ? b : a;
});

/**
 * Clamps the number `n` between the numbers `a` and `b` (i.e. a <= n <= b).
 *
 * @summary Clamps a number.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @param n A number.
 * @returns A number.
 */
var clamp = curry(function (a, b, n) {
  return max(a, min(n, b));
});

/**
 * Retruns true if the number `n` is between the numbers `a` and `b` (i.e. a <=
 * n <= b), false otherwise.
 *
 * @summary The between operator.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @param n A number.
 * @returns A number.
 */
var between = curry(function (a, b, n) {
  return a <= n && b >= n;
});

/**
 * Returns the negation of the number `a`.
 *
 * @summary The negation operator.
 *
 * @param a A number.
 * @returns A number.
 */
function negate(a) {
  return -a;
}

/**
 * Returns `true` if the value `a` is strictly equal (`===`) to the value `b`,
 * false otherwise.
 *
 * @summary The strict equality operator.
 *
 * @curried
 * @function
 * @param a A value.
 * @param b A value.
 * @returns A boolean value.
 */
var eq = equal;

/**
 * Returns `true` if the value `a` is strictly not equal (`!==`) to the value
 * `b`, false otherwise.
 *
 * @summary The strict inequality operator.
 *
 * @curried
 * @function
 * @param a A value.
 * @param b A value.
 * @returns A boolean value.
 */
var neq = notEqual;

/**
 * Returns `true` if the value `a` is greater than the value `b`, false
 * otherwise.
 *
 * @summary The greater than operator.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A boolean value.
 */
var gt = curry(function (a, b) {
  return b > a;
});

/**
 * Returns `true` if the value `a` is greater than or equal to the value `b`
 * false otherwise.
 *
 * @summary The greater than or equal operator.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A boolean value.
 */
var gte = curry(function (a, b) {
  return b >= a;
});

/**
 * Returns `true` if the value `a` is less than the value `b`, false otherwise.
 *
 * @summary The less than operator.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A boolean value.
 */
var lt = curry(function (a, b) {
  return b < a;
});

/**
 * Returns `true` if the value `a` is less than or equal to the value `b`,
 * false otherwise.
 *
 * @summary The less than or equal operator.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A boolean value.
 */
var lte = curry(function (a, b) {
  return b <= a;
});

/**
 * Returns `true` if the value `a` is even, false otherwise.
 *
 * @summary Tests whether a value is even.
 *
 * @param a A number.
 * @returns A boolean value.
 */
function even(a) {
  return !(a % 2);
}

/**
 * Returns `true` if the value `a` is odd, false otherwise.
 *
 * @summary Tests whether a value is odd.
 *
 * @param a A number.
 * @returns A boolean value.
 */
function odd(a) {
  return !!(a % 2);
}

/**
 * Returns the result of `a + 1`.
 *
 * @summary Increments a number.
 *
 * @param a A number.
 * @returns A number.
 */
function inc(a) {
  return a + 1;
}

/**
 * Returns the result of `a - 1`.
 *
 * @summary Decrements a number.
 *
 * @param a A number.
 * @returns A number.
 */
function dec(a) {
  return a - 1;
}

/**
 * Returns a random integer between `a` and `b`.
 *
 * @summary Generates a random integer.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A number.
 */
var randomInt = curry(function (a, b) {
  return Math.floor(Math.random() * (b - a + 1)) + a;
});

/**
 * Returns a random float between `a` and `b`.
 *
 * @summary Generates a random float.
 *
 * @curried
 * @function
 * @param a A number.
 * @param b A number.
 * @returns A number.
 */
var randomFloat = curry(function (a, b) {
  return Math.random() * (b - a) + a;
});

/**
 * This module defines fold operations on lists.
 *
 * @private
 * @module fkit/list/fold
 */

/**
 * Flattens any strings in the list of `as`.
 *
 * @private
 */
function flattenStrings(as) {
  if (isArrayOfStrings(as)) {
    return concat(as);
  } else {
    if (isArray(as)) {
      return as.map(flattenStrings);
    } else {
      return as;
    }
  }
}

/**
 * Returns a list that contains the elements in the list of `as` concatenated
 * with the starting value `s`.
 *
 * @private
 */
function concatWith(s, as) {
  return toArray(flatten(as)).reduce(flip(append), s);
}

/**
 * Returns a list that contains the concatenated elements in the list of
 * `as`.
 *
 * @summary Concatenates lists.
 *
 * @example
 *   F.concat([1], [2, 3], [4, 5, 6]) // [1, 2, 3, 4, 5, 6]
 *   F.concat('f', 'oo', 'bar') // 'foobar'
 *
 * @function
 * @param as A list.
 * @returns A new list.
 */
var concat = variadic(function (as) {
  return concatWith(mempty(as), as);
});

/**
 * Returns a list that contains the elements in the list of `as` mapped with
 * the function `f` concatenated together.
 *
 * @summary Maps a function over a list and concatenates the results.
 *
 * @example
 *   F.concatMap(function(a) {
 *     return [a, 0]
 *   }, [1, 2, 3]) // [1, 0, 2, 0, 3, 0]
 *
 *   F.concatMap(function(a) {
 *     return [a, '-']
 *   }, 'foo') // 'f-o-o-'
 *
 * @curried
 * @function
 * @param f A function.
 * @param as A list.
 * @returns A new list.
 */
var concatMap = curry(function (f, as) {
  var bs = toArray(as).map(compose(flattenStrings, f));
  var cs = bs.length > 0 ? bs : as;
  return concatWith(mempty(cs), bs);
});

/**
 * Returns a list that contains the elements in the list of `as` folded
 * left-to-right with the binary function `f` and starting value `s`.
 *
 * @summary Folds a list from left to right with a function.
 *
 * @example
 *   F.fold(F.flip(F.prepend), [], [1, 2, 3]) // [3, 2, 1]
 *   F.fold(F.flip(F.prepend), '', 'foo') // 'oof'
 *
 * @curried
 * @function
 * @param f A binary function.
 * @param s A starting value.
 * @param as A list.
 * @returns A value.
 */
var fold = curry(function (f, s, as) {
  return toArray(as).reduce(f, s);
});

/**
 * Returns a list that contains the elements in the list of `as` folded
 * right-to-left with the binary function `f` and starting value `s`.
 *
 * @summary Folds a list from right to left with a function.
 *
 * @example
 *   F.foldRight(F.append, [], [1, 2, 3]) // [3, 2, 1]
 *   F.foldRight(F.append, '', 'foo') // 'oof'
 *
 * @curried
 * @function
 * @param f A binary function.
 * @param s A starting value.
 * @param as A list.
 * @returns A value.
 */
var foldRight = curry(function (f, s, as) {
  return toArray(as).reduceRight(flip(f), s);
});

/**
 * Returns a list that contains the elements in the list of `as` scanned
 * left-to-right with the binary function `f` and starting value `s`.
 *
 * @summary Scans a list from left to right with a function.
 *
 * @example
 *   F.fold(F.flip(F.prepend), [],  [1, 2, 3]) // [[], [1], [2, 1], [3, 2, 1]]
 *   F.fold(F.flip(F.prepend), '',  'foo') // ['', 'f', 'of', 'oof']
 *
 * @curried
 * @function
 * @param f A binary function.
 * @param s A starting value.
 * @param as A list.
 * @returns A new list.
 */
var scan = curry(function (f, s, as) {
  var r = [s];
  fold(function (b, a) {
    return tap(r.push.bind(r), f(b, a));
  }, s, as);
  return r;
});

/**
 * Returns a list that contains the elements in the list of `as` scanned
 * right-to-left with the binary function `f` and starting value `s`.
 *
 * @summary Scans a list from right to left with a function.
 *
 * @example
 *   F.foldRight(F.append, [],  [1, 2, 3]) // [[3, 2, 1], [3, 2], [3], []]
 *   F.foldRight(F.append, '',  'foo') // ['oof', 'oo', 'o', '']
 *
 * @curried
 * @function
 * @param f A binary function.
 * @param s A starting value.
 * @param as A list.
 * @returns A new list.
 */
var scanRight = curry(function (f, s, as) {
  var r = [s];
  foldRight(function (a, b) {
    return tap(r.unshift.bind(r), f(a, b));
  }, s, as);
  return r;
});

/**
 * Returns the maximum value in the list of `as`.
 *
 * @summary Calculates the maximum value of a list.
 *
 * @example
 *   F.maximum([1, 2, 3]) // 3
 *   F.maximum('abc') // 'c'
 *
 * @param as A list.
 * @returns A value.
 */
function maximum(as) {
  return fold(max, as[0], as);
}

/**
 * Returns the minimum value in the list of `as`.
 *
 * @summary Calculates the minimum value of a list.
 *
 * @example
 *   F.minimum([1, 2, 3]) // 1
 *   F.minimum('abc') // 'a'
 *
 * @param as A list.
 * @returns A value.
 */
function minimum(as) {
  return fold(min, as[0], as);
}

/**
 * Returns the maximum value in the list of `as` using the comparator function
 * `c`.
 *
 * The comparator function compares two elements, `a` and `b`. If `a` is
 * greater than `b`, then the comparator function should return `1`. If `a` is
 * less than `b`, then the comparator function should return `-1`. If both
 * elements are equal then, the comparator function should return `0`.
 *
 * @summary Calculates the maximum value of a list using a comparator function.
 *
 * @example
 *   F.maximumBy((a, b) => a === b, [1, 2, 3]) // 3
 *
 * @curried
 * @function
 * @param c A comparator function.
 * @param as A list.
 * @returns A value.
 */
var maximumBy = curry(function (c, as) {
  return fold(function (a, b) {
    return c(a, b) > 0 ? a : b;
  }, as[0], as);
});

/**
 * Returns the minimum value in the list of `as` using the comparator function
 * `c`.
 *
 * @summary Calculates the minimum value of a list using a comparator
 * function.
 *
 * The comparator function compares two elements, `a` and `b`. If `a` is
 * greater than `b`, then the comparator function should return `1`. If `a` is
 * less than `b`, then the comparator function should return `-1`. If both
 * elements are equal, then the comparator function should return `0`.
 *
 * @example
 *   F.minimumBy((a, b) => a === b, [1, 2, 3]) // 1
 *
 * @curried
 * @function
 * @param c A comparator function.
 * @param as A list.
 * @returns A value.
 */
var minimumBy = curry(function (c, as) {
  return fold(function (a, b) {
    return c(a, b) < 0 ? a : b;
  }, as[0], as);
});

/**
 * Returns the sum of the elements in the list of `as`.
 *
 * @summary Calculates the sum of the elements in a list.
 *
 * @example
 *   F.sum([1, 2, 3]) // 6
 *
 * @param as A list.
 * @returns A number.
 */
function sum(as) {
  return fold(add, 0, as);
}

/**
 * Returns the product of the elements in the list of `as`.
 *
 * @summary Calculates the product of the elements in a list.
 *
 * @example
 *   F.product([1, 2, 3]) // 6
 *
 * @param as A list.
 * @returns A number.
 */
function product(as) {
  return fold(mul, 1, as);
}

/**
 * This module defines sublist operations on lists.
 *
 * @private
 * @module fkit/list/sublist
 */

/**
 * Returns the prefix of `n` elements from the list of `as`.
 *
 * @summary Gets the prefix of a list.
 *
 * @example
 *   F.take(2, [1, 2, 3]) // [1, 2]
 *   F.take(2, 'foo') // 'fo'
 *
 * @curried
 * @function
 * @param n A number.
 * @param as A list.
 * @returns A new list.
 */
var take = curry(function (n, as) {
  var s = isString(as) ? '' : [];
  var m = as.length;

  for (var i = 0; i < Math.min(m, n); i++) {
    s = s.concat(as[i]);
  }

  return s;
});

/**
 * Returns the suffix after dropping `n` elements from the list of `as`.
 *
 * @summary Gets the suffix of a list.
 *
 * @example
 *   F.drop(2, [1, 2, 3]) // [3]
 *   F.drop(2, 'foo') // 'o'
 *
 * @curried
 * @function
 * @param n A number.
 * @param as A list.
 * @returns A new list.
 */
var drop = curry(function (n, as) {
  var s = isString(as) ? '' : [];
  var m = as.length;

  for (var i = n; i < m; i++) {
    s = s.concat(as[i]);
  }

  return s;
});

/**
 * Returns the prefix of elements from the list of `as` while the predicate
 * function `p` is satisfied.
 *
 * @summary Gets the prefix of a list using a predicate function.
 *
 * @example
 *   F.takeWhile(F.lt(3), [1, 2, 3]) // [1, 2]
 *   F.takeWhile(F.neq(o), 'foo') // 'f'
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param as A list.
 * @returns A new list.
 */
var takeWhile = curry(function (p, as) {
  var s = isString(as) ? '' : [];
  var n = as.length;

  for (var i = 0; i < n && p(as[i]); i++) {
    s = s.concat(as[i]);
  }

  return s;
});

/**
 * Returns the suffix after dropping elements from the list of `as` while the
 * predicate function `p` is satisfied.
 *
 * @summary Gets the suffix of a list using a predicate function.
 *
 * @example
 *   F.dropWhile(F.lt(3), [1, 2, 3]) // [3]
 *   F.dropWhile(F.neq(o), 'foo') // 'oo'
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param as A list.
 * @returns A new list.
 */
var dropWhile = curry(function (p, as) {
  var s = isString(as) ? '' : [];
  var m = as.length;
  var n = 0;

  while (n < m && p(as[n])) {
    n++;
  }

  for (var i = n; i < m; i++) {
    s = s.concat(as[i]);
  }

  return s;
});

/**
 * Returns a list that contains the elements in the list of `as` split into a
 * pair of lists: a prefix of length `n` and the remainder of the list.
 *
 * @summary Splits a list.
 *
 * @example
 *   F.splitAt(1, [1, 2, 3]) // [[1], [2, 3]]
 *   F.splitAt(1, 'foo') // ['f', 'oo']
 *
 * @curried
 * @function
 * @param n A number.
 * @param as A list.
 * @returns A pair of lists.
 */
var splitAt = curry(function (n, as) {
  return [take(n, as), drop(n, as)];
});

/**
 * Returns a list that contains the elements in the list of `as` split into a
 * pair of lists: a prefix of elements that satisfy the predicate function `p`
 * and the remainder of the list.
 *
 * @summary Splits a list using a predicate function.
 *
 * @example
 *   F.span(F.lt(3), [1, 2, 3]) // [[1, 2], [3]]
 *   F.span(F.neq(o), 'foo') // ['f', 'oo']
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param as A list.
 * @returns A pair of lists.
 */
var span = curry(function (p, as) {
  return [takeWhile(p, as), dropWhile(p, as)];
});

/**
 * Returns a list that contains the elements in the list of `as` grouped into
 * sublists of equal elements.
 *
 * It is a special case of the `groupBy` function where the elements are
 * compared using the strict equality `===` operator.
 *
 * @summary Groups the elements in a list.
 *
 * @example
 *   F.group([1, 2, 2, 3, 3, 3]) // [[1], [2, 2], [3, 3, 3]]
 *   F.group('Mississippi') // ['M', 'i', 'ss', 'i', 'ss', 'i', 'pp', 'i']
 *
 * @param as A list.
 * @returns A new list.
 */
function group(as) {
  return groupBy(equal, as);
}

/**
 * Returns a list that contains the elements in the list of `as` grouped into
 * sublists that satisfy the comparator function `c`.
 *
 * The comparator function compares two elements, `a` and `b`. If the elements
 * are both considered to be in the same group, then the comparator function
 * should return `true`. Otherwise it should return `false`.
 *
 * @summary Groups the elements in a list using a comparator function.
 *
 * @example
 *   F.groupBy((a, b) => a === b, [1, 2, 2, 3, 3, 3]) // [[1], [2, 2], [3, 3, 3]]
 *
 * @curried
 * @function
 * @param c A comparator function.
 * @param as A list.
 * @returns A new list.
 */
var groupBy = curry(function groupBy(c, as) {
  var b = head(as);
  var bs = span(function (a) {
    return c(a, b);
  }, tail(as));

  return empty(as) ? [] : prepend(prepend(b, head(bs)), groupBy(c, last(bs)));
});

/**
 * This module defines operations for building lists.
 *
 * @private
 * @module fkit/list/build
 */

/**
 * Returns an array of length `n`.
 *
 * @summary Creates a new array.
 *
 * @example
 *   F.array(3) // [undefined, undefined, undefined]
 *
 * @param n A number.
 * @returns A new array.
 */
function array(n) {
  return Array.apply(null, Array(n));
}

/**
 * Returns an string of length `n`.
 *
 * @summary Creates a new string.
 *
 * @example
 *   F.string(3) // '   '
 *
 * @param n A number.
 * @returns A new string.
 */
function string(n) {
  return array(n + 1).join(' ');
}

/**
 * Returns an ordered pair with the values `a` and `b`.
 *
 * @summary Creates a new ordered pair.
 *
 * @example
 *   F.pair(1, 2) // [1, 2]
 *   F.pair('a', 'b') // ['a', 'b']
 *
 * @curried
 * @function
 * @param a A value.
 * @param b A value.
 * @returns A new pair.
 */
var pair = curry(function (a, b) {
  return [a, b];
});

/**
 * Returns an array of numbers of length `n` starting from `a`.
 *
 * @summary Creates a new array of numbers.
 *
 * @example
 *   F.range(1, 3) // [1, 2, 3]
 *
 * @curried
 * @function
 * @param a A number.
 * @param n A number.
 * @returns A new array.
 */
var range = curry(function (a, n) {
  return array(n).map(function (_, i) {
    return a + i;
  });
});

/**
 * Returns a list of length `n` with `a` the value of every element.
 *
 * @summary Replicates a value.
 *
 * @example
 *   F.replicate(3, 1) // [1, 1, 1]
 *   F.replicate(3, 'a') // 'aaa'
 *
 * @curried
 * @function
 * @param n A number.
 * @param a A value.
 * @returns A new list.
 */
var replicate = curry(function (n, a) {
  var as = isString(a) ? string(n) : array(n);
  return concatMap(function () {
    return [a];
  }, as);
});

/**
 * Returns a list of `n` elements randomly sampled from the list of `as`.
 *
 * @summary Samples random elements from a list.
 *
 * @example
 *   F.sample(2, [1, 2, 3]) // [3, 1]
 *   F.sample(2, 'abc') // 'ca'
 *
 * @curried
 * @function
 * @param n A number.
 * @param as A list.
 * @returns A new list.
 */
var sample = curry(function (n, as) {
  return take(n, shuffle(as));
});

/**
 * Returns a list that contains the elements in the list of `as` randomly
 * shuffled using the [Fisher-Yates
 * algorithm](http://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
 *
 * @summary Shuffles a list.
 *
 * @example
 *   F.shuffle([1, 2, 3]) // [2, 3, 1]
 *   F.shuffle('abc') // 'bca'
 *
 * @param as A list.
 * @returns A new list.
 */
function shuffle(as) {
  var i = -1;

  var f = function f(b, a) {
    var j = randomInt(0, ++i);

    b[i] = b[j];
    b[j] = a;

    return b;
  };

  var r = array(as.length);
  var bs = fold(f, r, as);
  var s = isString(as) ? '' : [];

  return concatWith(s, bs);
}

/**
 * This module defines map operations on lists.
 *
 * @private
 * @module fkit/list/map
 */

/**
 * Returns a list that contains the elements in the list of `as` mapped with
 * the function `f`.
 *
 * @summary Maps a function over a list.
 *
 * @example
 *   F.map(F.inc, [1, 2, 3]) // [2, 3, 4]
 *   F.map(F.toUpper, 'foo') // ['F', 'O', 'O']
 *
 * @curried
 * @function
 * @param f A function.
 * @param as A list.
 * @returns A new list.
 */
var map = curry(function (f, as) {
  return toArray(as).map(f);
});

/**
 * Returns a list that contains the elements in the list of `as` in reverse
 * order.
 *
 * @summary Reverses the elements in a list.
 *
 * @example
 *   F.reverse([1, 2, 3]) // [3, 2, 1]
 *   F.reverse('foo') // 'oof'
 *
 * @param as A list.
 * @returns A new list.
 */
var reverse = function reverse(as) {
  return toArray(as).reduce(flip(prepend), mempty(as));
};

/**
 * Returns a list that contains the elements in the list of `as` interspersed
 * with the separator `s`.
 *
 * @summary Intersperses the elements of a list with separator.
 *
 * @example
 *   F.intersperse(4, [1, 2, 3]) // [1, 4, 2, 4, 3]
 *   F.intersperse('-', 'foo') // 'f-o-o'
 *
 * @curried
 * @function
 * @param s A separator.
 * @param as A list.
 * @returns A new list.
 */
var intersperse = curry(function (s, as) {
  var prependToAll = function prependToAll(bs) {
    return empty(bs) ? mempty(bs) : concat(s, head(bs), prependToAll(tail(bs)));
  };

  return empty(as) ? mempty(as) : concat(head(as), prependToAll(tail(as)));
});

/**
 * This module defines logic functions.
 *
 * @module fkit/logic
 * @summary Logical Functions and Combinators
 */

/**
 * Returns the result of `b && a`.
 *
 * @summary The logical AND operator.
 *
 * @curried
 * @function
 * @param a A boolean value.
 * @param b A boolean value.
 * @returns A boolean value.
 */
var and = curry(function (a, b) {
  return b && a;
});

/**
 * Returns the result of `b || a`.
 *
 * @summary The logical OR operator.
 *
 * @curried
 * @function
 * @param a A boolean value.
 * @param b A boolean value.
 * @returns A boolean value.
 */
var or = curry(function (a, b) {
  return b || a;
});

/**
 * Returns the result of `!a`.
 *
 * @summary The logical NOT operator.
 *
 * @param a A boolean.
 * @returns A boolean value.
 */
function not(a) {
  return !a;
}

/**
 * If `p(a)` is true then `f` is applied to `a`, otherwise `g` is applied to
 * `a`.
 *
 * @summary Branches execution based on a predicate function.
 *
 * @example
 *   function big(a) { return a + ' is a big number' }
 *   function small(a) { return a + ' is a small number' }
 *   var f = F.branch(F.gt(10), big, small)
 *   f(10) // small number
 *   f(11) // big number
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param f A function.
 * @param g A function.
 * @param a A value.
 * @returns A value.
 */
var branch = curry(function (p, f, g, a) {
  return p(a) ? f(a) : g(a);
});

/**
 * Applies the list of predicate functions `ps` to the value `a` and returns
 * their conjunction.
 *
 * @example
 *   var ps = [F.gt(1), F.gt(2)]
 *   F.whereAll(ps, 1) // false
 *   F.whereAll(ps, 2) // false
 *   F.whereAll(ps, 3) // true
 *
 * @curried
 * @function
 * @param ps A list of predicate functions.
 * @param a A value.
 * @returns A boolean value.
 */
var whereAll = curry(function (ps, a) {
  return ps.map(applyRight(a)).reduce(and, true);
});

/**
 * Applies the list of predicate functions `ps` to the value `a` and returns
 * their disjunction.
 *
 * @example
 *   var ps = [F.gt(1), F.gt(2)]
 *   F.whereAny(ps, 1) // false
 *   F.whereAny(ps, 2) // true
 *   F.whereAny(ps, 3) // true
 *
 * @curried
 * @function
 * @param ps A list of predicate functions.
 * @param a A value.
 * @returns A boolean value.
 */
var whereAny = curry(function (ps, a) {
  return ps.map(applyRight(a)).reduce(or, false);
});

/**
 * This module defines search operations on lists.
 *
 * @private
 * @module fkit/list/search
 */

/**
 * Returns `true` if the list of `as` contains the element `a`, `false`
 * otherwise.
 *
 * @summary Determines if a value is present in a list.
 *
 * @example
 *   F.elem(0, [1, 2, 3]) // false
 *   F.elem(1, [1, 2, 3]) // true
 *
 *   F.elem('a', 'foo') // false
 *   F.elem('o', 'foo') // true
 *
 * @curried
 * @function
 * @param a A value.
 * @param as A list.
 * @returns A boolean value.
 */
var elem = curry(function (a, as) {
  return as.indexOf(a) >= 0;
});

/**
 * Returns the index of the first occurance of the element `a` in the list of
 * `as`.
 *
 * @summary Gets the index of the first occurance of an element in a list.
 *
 * @example
 *   F.elemIndex(0, [1, 2, 3]) // undefined
 *   F.elemIndex(1, [1, 2, 3]) // 0
 *
 *   F.elemIndex('a', 'foo') // undefined
 *   F.elemIndex('o', 'foo') // 1
 *
 * @curried
 * @function
 * @param a A value.
 * @param as A list.
 * @returns A number or `undefined` if no value was found.
 */
var elemIndex = curry(function (a, as) {
  var i = as.indexOf(a);
  return i >= 0 ? i : undefined;
});

/**
 * Returns the indices of all occurances of the element `a` in the list of
 * `as`.
 *
 * @summary Gets the indices of all occurances of an element in a list.
 *
 * @example
 *   F.elemIndices(0, [1, 2, 3]) // []
 *   F.elemIndices(1, [1, 2, 3]) // [0]
 *
 *   F.elemIndices('a', 'foo') // []
 *   F.elemIndices('o', 'foo') // [1, 2]
 *
 * @curried
 * @function
 * @param a A value.
 * @param as A list.
 * @returns A number or `undefined` if no value was found.
 */
var elemIndices = curry(function (a, as) {
  return findIndices(equal(a), as);
});

/**
 * Returns an element in the list of `as` that satisfies the predicate function
 * `p`.
 *
 * @summary Finds an element in a list that satisfies a predicate function.
 *
 * @example
 *   F.find(F.gt(1), []) // undefined
 *   F.find(F.gt(1), [1, 2, 3]) // 2
 *
 *   F.find(F.eq('o'), '') // undefined
 *   F.find(F.eq('o'), 'foo') // 'o'
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param as A list.
 * @returns A value or `undefined` if no value was found.
 */
var find = curry(function (p, as) {
  return head(filter(p, as));
});

/**
 * Returns the index of the first occurance of an element in the list of `as`
 * that satisfies the predicate function `p`.
 *
 * @summary Finds the index of the first occurance of an element in a list that
 * satisfies a predicate function.
 *
 * @example
 *   F.findIndex(F.gt(1), []) // undefined
 *   F.findIndex(F.gt(1), [1, 2, 3]) // 1
 *
 *   F.findIndex(F.eq('o'), '') // undefined
 *   F.findIndex(F.eq('o'), 'foo') // 1
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param as A list.
 * @returns A number or `undefined` if no value was found.
 */
var findIndex = curry(function (p, as) {
  var n = as.length;

  for (var i = 0; i < n; i++) {
    if (p(as[i])) {
      return i;
    }
  }

  return undefined;
});

/**
 * Returns the indices of the elements in the list of `as` that satisfy the
 * predicate function `p`.
 *
 * @summary Finds the indices of all occurances of the elements in a list that
 * satisfy a predicate function.
 *
 * @example
 *   F.findIndices(F.gt(1), []) // []
 *   F.findIndices(F.gt(1), [1, 2, 3]) // [1, 2]
 *
 *   F.findIndices(F.eq('o'), '') // []
 *   F.findIndices(F.eq('o'), 'foo') // [1, 2]
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param as A list.
 * @returns A number or `undefined` if no value was found.
 */
var findIndices = curry(function (p, as) {
  var s = [];
  var n = as.length;

  for (var i = 0; i < n; i++) {
    if (p(as[i])) {
      s.push(i);
    }
  }

  return s;
});

/**
 * Returns a list that contains the elements in the list of `as` that satisfy
 * the predicate function `p`.
 *
 * @summary Filters a list using a predicate function.
 *
 * @example
 *   F.filter(F.gt(1), [1, 2, 3]) // [2, 3]
 *   F.filter(F.eq('o'), 'foo') // 'oo'
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param as A list.
 * @returns A new list.
 */
var filter = curry(function (p, as) {
  var f = branch(p, id, always(''));
  return isString(as) ? concatMap(f, as) : as.filter(p);
});

/**
 * Returns a list that contains the elements in the list of `as` split into a
 * pair of lists: the elements that satisfy the predicate function `p` and the
 * elements that do not satisfy the predicate function `p`.
 *
 * @summary Partitions a list using a predicate function.
 *
 * @example
 *   F.partition(F.gt(1), [1, 2, 3]) // [[2, 3], [1]]
 *   F.partition(F.eq('o'), 'foo') // ['oo', 'f']
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param as A list.
 * @returns A pair of lists.
 */
var partition = curry(function (p, as) {
  return [filter(p, as), filter(compose(not, p), as)];
});

/**
 * Returns `true` if all elements in the list of `as` satisfy the predicate
 * function `p`, `false` otherwise.
 *
 * @summary Determines if all elements in a list satisfy a predicate function.
 *
 * @example
 *   F.all(F.gt(1), [1, 2, 3]) // false
 *   F.all(F.gt(1), [2, 3]) // true
 *   F.all(F.gt(1), [3]) // true
 *
 *   F.all(F.eq('o'), 'foo') // false
 *   F.all(F.eq('o'), 'oo') // true
 *   F.all(F.eq('o'), 'o') // true
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param as A list.
 * @returns A boolean value.
 */
var all = curry(function (p, as) {
  return filter(p, as).length === as.length;
});

/**
 * Returns `true` if any elements in the list of `as` satisfy the predicate
 * function `p`, `false` otherwise.
 *
 * @summary Determines if any elements in a list satisfy a predicate function.
 *
 * @example
 *   F.any(F.gt(1), [1, 2, 3]) // true
 *   F.any(F.gt(1), [1, 2]) // true
 *   F.any(F.gt(1), [1]) // false
 *
 *   F.any(F.eq('o'), 'foo') // true
 *   F.any(F.eq('o'), 'fo') // true
 *   F.any(F.eq('o'), 'f') // false
 *
 * @curried
 * @function
 * @param p A predicate function.
 * @param as A list.
 * @returns A boolean value.
 */
var any = curry(function (p, as) {
  return filter(p, as).length > 0;
});

/**
 * Returns `true` if the list of `as` is a prefix of the list of `bs`, `false`
 * otherwise.
 *
 * @summary Determines if a list is a prefix of another list.
 *
 * @example
 *   F.isPrefixOf([], [1, 2, 3]) // true
 *   F.isPrefixOf([1, 2], [1, 2, 3]) // true
 *   F.isPrefixOf([2, 3], [1, 2, 3]) // false
 *
 *   F.isPrefixOf('', 'foo') // true
 *   F.isPrefixOf('fo', 'foo') // true
 *   F.isPrefixOf('oo', 'foo') // false
 *
 * @curried
 * @function
 * @param as A list.
 * @param bs A list.
 * @returns A boolean value.
 */
var isPrefixOf = curry(function isPrefixOf(as, bs) {
  if (empty(as)) {
    return true;
  } else if (empty(bs)) {
    return false;
  } else {
    return head(as) === head(bs) && isPrefixOf(tail(as), tail(bs));
  }
});

/**
 * Returns `true` if the list of `as` is a suffix of the list of `bs`, `false`
 * otherwise.
 *
 * @summary Determines if a list is a suffix of another list.
 *
 * @example
 *   F.isSuffixOf([], [1, 2, 3]) // true
 *   F.isSuffixOf([1, 2], [1, 2, 3]) // false
 *   F.isSuffixOf([2, 3], [1, 2, 3]) // true
 *
 *   F.isSuffixOf('', 'foo') // true
 *   F.isSuffixOf('fo', 'foo') // false
 *   F.isSuffixOf('oo', 'foo') // true
 *
 * @curried
 * @function
 * @param as A list.
 * @param bs A list.
 * @returns A boolean value.
 */
var isSuffixOf = curry(function (as, bs) {
  return isPrefixOf(reverse(as), reverse(bs));
});

/**
 * Returns `true` if the list of `as` is contained within the list of `bs`,
 * `false` otherwise.
 *
 * @summary Determines if a list is contained within another list.
 *
 * @example
 *   F.isInfixOf([], [1, 2, 3]) // true
 *   F.isInfixOf([2, 3], [1, 2, 3]) // true
 *   F.isInfixOf([3, 2], [1, 2, 3]) // false
 *
 *   F.isInfixOf('', 'foo') // true
 *   F.isInfixOf('oo', 'foo') // true
 *   F.isInfixOf('of', 'foo') // false
 *
 * @curried
 * @function
 * @param as A list.
 * @param bs A list.
 * @returns A boolean value.
 */
var isInfixOf = curry(function (as, bs) {
  return any(isPrefixOf(as), tails(bs));
});

/**
 * This module defines set operations on lists.
 *
 * @private
 * @module fkit/list/set
 */

/**
 * Returns a list with all duplicate elements removed from the list of `bs`.
 * The elements are compared using the comparator function `f`.
 *
 * The comparator function compares two elements, `a` and `b`. If the elements
 * are both considered to equal, then the comparator function should return
 * `true`. Otherwise it should return `false`.
 *
 * @summary Removes duplicate elements from a list using a comparator function.
 *
 * @example
 *   F.nubBy((a, b) => a === b, [1, 2, 2, 3, 3, 3]) // [1, 2, 3]
 *
 * @curried
 * @function
 * @param f A comparator function.
 * @param as A list.
 * @returns A new list.
 */
var nubBy = curry(function nubBy(f, as) {
  var a = head(as);

  return empty(as) ? mempty(as) : prepend(a, nubBy(f, filter(function (b) {
    return !f(a, b);
  }, tail(as))));
});

/**
 * Returns a list with all duplicate elements removed from the list of `as`.
 *
 * It is a special case of the `nubBy` function where the elements are compared
 * using the strict equality `===` operator.
 *
 * The resulting list will only contain unique elements.
 *
 * @summary Removes duplicate elements from a list.
 *
 * @example
 *   F.nub([1, 2, 2, 3, 3, 3]) // [1, 2, 3]
 *   F.nub('abbccc') // 'abc'
 *
 * @param as A list.
 * @returns A new list.
 */
var nub = nubBy(equal);

/**
 * Returns a list that contains the union of elements in the lists of `as` and
 * `bs`. The elements are compared using the comparator function `f`.
 *
 * The comparator function compares two elements, `a` and `b`. If the elements
 * are both considered to equal, then the comparator function should return
 * `true`. Otherwise it should return `false`.
 *
 * Duplicates are removed from `bs`, but if `as` contains duplicates then so
 * will the result.
 *
 * @summary Calculates the union of two lists.
 *
 * @example
 *   F.unionBy((a, b) => a === b, [1, 2, 3], [2, 3, 4]) // [1, 2, 3, 4]
 *   F.unionBy((a, b) => a === b, 'hello', 'world') // 'hellowrd'
 *
 * @curried
 * @function
 * @param f A comparator function.
 * @param as A list.
 * @param bs A list.
 * @returns A new list.
 */
var unionBy = curry(function (f, as, bs) {
  return fold(function (cs, b) {
    return any(function (a) {
      return f(a, b);
    }, as) ? cs : append(b, cs);
  }, as, bs);
});

/**
 * Returns a list that contains the union of elements in the lists of `as` and
 * `bs`.
 *
 * It is a special case of the `unionBy` function where the elements are
 * compared using the strict equality `===` operator.
 *
 * Duplicates are removed from `bs`, but if `as` contains duplicates then so
 * will the result.
 *
 * @summary Calculates the union of two lists.
 *
 * @example
 *   F.union([1, 2, 3], [2, 3, 4]) // [1, 2, 3, 4]
 *   F.union('hello', 'world') // 'hellowrd'
 *
 * @curried
 * @function
 * @param as A list.
 * @param bs A list.
 * @returns A new list.
 */
var union = unionBy(equal);

/**
 * Returns a list that contains the intersection of the elments in the lists of
 * `as` and `bs`. The elements are compared using the comparator function `f`.
 *
 * The comparator function compares two elements, `a` and `b`. If the elements
 * are both considered to equal, then the comparator function should return
 * `true`. Otherwise it should return `false`.
 *
 * Duplicates are removed from `bs`, but if `as` contains duplicates then so
 * will the result.
 *
 * @summary Calculates the intersection of two lists.
 *
 * @example
 *   F.intersectBy((a, b) => a === b, [1, 2, 3], [2, 3, 4]) // [2, 3]
 *   F.intersectBy((a, b) => a === b, 'hello', 'world') // 'ol'
 *
 * @curried
 * @function
 * @param f A comparator function.
 * @param as A list.
 * @param bs A list.
 * @returns A new list.
 */
var intersectBy = curry(function (f, as, bs) {
  return fold(function (cs, a) {
    return any(function (b) {
      return f(a, b);
    }, bs) ? append(a, cs) : cs;
  }, mempty(as), as);
});

/**
 * Returns a list that contains the intersection of the elments in the lists of
 * `as` and `bs`.
 *
 * It is a special case of the `intersectBy` function where the elements are
 * compared using the strict equality `===` operator.
 *
 * Duplicates are removed from `bs`, but if `as` contains duplicates then so
 * will the result.
 *
 * @summary Calculates the intersection of two lists.
 *
 * @example
 *   F.intersect([1, 2, 3], [2, 3, 4]) // [2, 3]
 *   F.intersect('hello', 'world') // 'ol'
 *
 * @curried
 * @function
 * @param as A list.
 * @param bs A list.
 * @returns A new list.
 */
var intersect = intersectBy(equal);

/**
 * Returns a list that contains the difference of the elements in the lists of
 * `as` and `bs`. The elements are compared using the comparator function `f`.
 *
 * The comparator function compares two elements, `a` and `b`. If the elements
 * are both considered to equal, then the comparator function should return
 * `true`. Otherwise it should return `false`.
 *
 * @summary Calculates the difference of two lists.
 *
 * @example
 *   F.differenceBy((a, b) => a === b, [1, 2, 3], [2, 3, 4]) // [1]
 *   F.differenceBy((a, b) => a === b, 'hello', 'world') // 'hel'
 *
 * @curried
 * @function
 * @param f A comparator function.
 * @param as A list.
 * @param bs A list.
 * @returns A new list.
 */
var differenceBy = curry(function (f, as, bs) {
  return fold(flip(removeBy(f)), as, bs);
});

/**
 * Returns a list that contains the difference of the elements in the lists of
 * `as` and `bs`.
 *
 * It is a special case of the `differenceBy` function where the elements are
 * compared using the strict equality `===` operator.
 *
 * @summary Calculates the difference of two lists.
 *
 * @example
 *   F.difference([1, 2, 3], [2, 3, 4]) // [1]
 *   F.difference('hello', 'world') // 'hel'
 *
 * @curried
 * @function
 * @param as A list.
 * @param bs A list.
 * @returns A new list.
 */
var difference = differenceBy(equal);

/**
 * Returns a list with the first occurance of the element `a` removed from the
 * list of `bs`. The elements are compared using the comparator function `f`.
 *
 * The comparator function compares two elements, `a` and `b`. If the elements
 * are both considered to equal, then the comparator function should return
 * `true`. Otherwise it should return `false`.
 *
 * @summary Removes the first occurance of an element from a list using a
 * comparator function.
 *
 * @example
 *   F.removeBy((a, b) => a === b, 2, [1, 2, 3]) // [1, 3]
 *
 * @curried
 * @function
 * @param f A comparator function.
 * @param a A value.
 * @param bs A list.
 * @returns A new list.
 */
var removeBy = curry(function removeBy(f, a, bs_) {
  var b = head(bs_);
  var bs = tail(bs_);

  return empty(bs_) ? mempty(bs_) : f(a, b) ? bs : prepend(b, removeBy(f, a, bs));
});

/**
 * Returns a list with the first occurance of the element `a` removed from the
 * list of `bs`.
 *
 * It is a special case of the `removeBy` function where the elements are
 * compared using the strict equality `===` operator.
 *
 * @summary Removes the first occurance of an element from a list.
 *
 * @example
 *   F.remove(2, [1, 2, 3]) // [1, 3]
 *   F.remove('f', 'foo') // 'oo'
 *
 * @curried
 * @function
 * @param a A value.
 * @param bs A list.
 * @returns A new list.
 */
var remove = removeBy(equal);

/**
 * Returns a list that contains all the ordered pairs `[a, b]` in the lists of
 * `as` and `bs`.
 *
 * @summary Calculates the cartesian product of two lists.
 *
 * @example
 *   F.cartesian([1, 2], [3, 4]) // [[1, 3], [1, 4], [2, 3], [2, 4]]
 *   F.cartesian('ab', 'cd') // [['a', 'c'], ['a', 'd'], ['b', 'c'], ['b', 'd']]
 *
 * @curried
 * @function
 * @param as A list.
 * @param bs A list.
 * @returns A new list.
 */
var cartesian = curry(function cartesian(as, bs) {
  return empty(as) ? [] : concat(map(pair(head(as)), bs), cartesian(tail(as), bs));
});

/**
 * Returns a list that contains all the subsequences of the elements in the
 * list of `as`.
 *
 * @summary Calculates the subsequences of a list.
 *
 * @example
 *   F.subsequences([1, 2, 3]) // [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]
 *   F.subsequences('abc') // ['', 'a', 'b', 'ab', 'c', 'ac', 'bc', 'abc']
 *
 * @param as A list.
 * @returns A new list.
 */
function subsequences(as) {
  var subsequences_ = function subsequences_(bs) {
    var b = head(bs);
    var f = function f(ys, r) {
      return concat(pure(ys), pure(prepend(b, ys)), r);
    };

    if (empty(bs)) {
      return [];
    } else {
      return prepend(pure(b), foldRight(f, [], subsequences_(tail(bs))));
    }
  };

  return prepend(mempty(as), subsequences_(as));
}

/**
 * Returns a list that contains all the permutations of the elements in the
 * list of `as`.
 *
 * @summary Calculates the permutations of a list.
 *
 * @example
 *   F.permutations([1, 2, 3]) // [[1, 2, 3], [2, 1, 3], [3, 2, 1], [2, 3, 1], [3, 1, 2], [1, 3, 2]]
 *   F.permutations('abc') // ['abc', 'bac', 'cba', 'bca', 'cab', 'acb']
 *
 * @param as A list.
 * @returns A new list.
 */
function permutations(as) {
  var permutations_ = function permutations_(bs_, cs) {
    var b = head(bs_);
    var bs = tail(bs_);

    return empty(bs_) ? [] : foldRight(interleave, permutations_(bs, prepend(b, cs)), permutations(cs));

    function interleave(ds, r) {
      return interleave_(id, ds)[1];

      function interleave_(f, es_) {
        if (empty(es_)) {
          return [bs, r];
        } else {
          var e = head(es_);
          var es = tail(es_);
          var s = interleave_(compose(f, prepend(e)), es);

          return [prepend(e, s[0]), prepend(f(concat(b, e, s[0])), s[1])];
        }
      }
    }
  };

  return prepend(as, permutations_(as, []));
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

/**
 * This module defines operations for sorting lists.
 *
 * @private
 * @module fkit/list/sort
 */

/**
 * Returns a list that contains the elements in the list of `as` sorted.
 *
 * @summary Sorts a list using natural ordering.
 *
 * @example
 *   F.sort([2, 3, 1]) // [1, 2, 3]
 *   F.sort('bca') // 'abc'
 *
 * @param a A list.
 * @returns A new list.
 */
function sort(as) {
  return sortBy(compare, as);
}

/**
 * Returns a list that contains the elements in the list of `as` sorted using
 * the comparator function `c`.
 *
 * The comparator function compares two elements, `a` and `b`. If `a` is
 * greater than `b`, then the comparator function should return `1`. If `a` is
 * less than `b`, then the comparator function should return `-1`. If both
 * elements are equal then, the comparator function should return `0`.
 *
 * @summary Sorts a list using a comparator function.
 *
 * @example
 *   F.sortBy((a, b) =>
 *     a > b ? 1 : (a < b ? -1 : 0)
 *   , [2, 3, 1]) // [1, 2, 3]
 *
 * @curried
 * @function
 * @param c A comparator function.
 * @param as A list.
 * @returns A new list.
 */
var sortBy = curry(function (c, as) {
  var bs = toArray(as.slice(0));
  return toList(bs.sort(c), typeof as === 'undefined' ? 'undefined' : _typeof(as));
});

/**
 * This module defines zip operations on lists.
 *
 * @private
 * @module fkit/list/zip
 */

/**
 * Returns the lists of `as` and `bs` zipped with the binary function `f`.
 *
 * @summary Zips two lists with a function.
 *
 * @curried
 * @function
 * @param f A binary function.
 * @param as A list.
 * @param bs A list.
 * @returns A new list.
 */
var zipWith = curry(function (f, as, bs) {
  var n = Math.min(as.length, bs.length);
  return toArray(as.slice(0, n)).map(function (a, i) {
    return f(a, bs[i]);
  });
});

/**
 * Returns the lists of `as` and `bs` zipped into a list of pairs.
 *
 * It is a special case of the `zipWith` function where the elements are
 * combined using the `F.pair` function.
 *
 * @summary Zips two lists into list of pairs.
 *
 * @example
 *   F.zip([1, 2, 3], [4, 5, 6]) // [[1, 4], [2, 5], [3, 6]]
 *   F.zip('foo', 'bar') // [['f', 'b'], ['o', 'a'], ['o', 'r']]
 *
 * @curried
 * @function
 * @param as A list.
 * @param bs A list.
 * @returns A new list.
 */
var zip = curry(function (as, bs) {
  return zipWith(pair, as, bs);
});

/**
 * Returns the list of pairs `as` unzipped into a pair of lists.
 *
 * @summary Unzips a list of pairs into a pair of lists.
 *
 * @example
 *   F.unzip([[1, 4], [2, 5], [3, 6]]) // [[1, 2, 3], [4, 5, 6]]
 *   F.unzip([['f', 'b'], ['o', 'a'], ['o', 'r']]) // ['foo', 'bar']
 *
 * @function
 * @param as A list.
 * @returns A new list.
 */
var unzip = function unzip(as) {
  var s = mempty(as[0]);

  return as.reduceRight(function (p, ps) {
    var a = ps[0];
    var b = ps[1];
    var as = p[0];
    var bs = p[1];

    return [prepend(a, as), prepend(b, bs)];
  }, [s, s]);
};

/**
 * FKit treats both arrays and strings as *lists*: an array is a list of
 * elements, and a string is a list of characters.
 *
 * Representing strings as lists may be a novel concept for some JavaScript
 * users, but it is quite common in other languages. This seemingly simple
 * abstractions yields a great deal of power: it allows you to apply the same
 * list combinators to both arrays and strings.
 *
 * @summary Working with Lists
 *
 * @module fkit/list
 * @mixes module:fkit/list/base
 * @mixes module:fkit/list/build
 * @mixes module:fkit/list/fold
 * @mixes module:fkit/list/map
 * @mixes module:fkit/list/search
 * @mixes module:fkit/list/set
 * @mixes module:fkit/list/sort
 * @mixes module:fkit/list/sublist
 * @mixes module:fkit/list/zip
 */

/**
 * This module defines operations on objects.
 *
 * @module fkit/obj
 * @summary Objects
 */

/**
 * Returns the result of the method `k` of object `o` applied to the value `a`.
 *
 * @summary Applies a method to a value.
 *
 * @example
 *   var person = {sayHi: function(a) { return ['Hi', a, '!'].join(' ') }}
 *   F.applyMethod(sayHi, 'Jane', person) // Hi Jane!
 *
 * @curried
 * @function
 * @param k A string.
 * @param a A value.
 * @param o An object.
 * @returns A value.
 */
var applyMethod = curry(function (k, a, o) {
  return o[k](a);
});

/**
 * Returns the result of the method `k` of object `o` applied to the values `a`
 * and `b`.
 *
 * @summary Applies a method to two values.
 *
 * @example
 *   var person = {sayHi: function(a, b) { return ['Hi', a, b, '!'].join(' ') }}
 *   F.applyMethod2(sayHi, 'Jane', 'Appleseed', person) // Hi Jane Appleseed!
 *
 * @curried
 * @function
 * @param k A string.
 * @param a A value.
 * @param b A value.
 * @param o An object.
 * @returns A value.
 */
var applyMethod2 = curry(function (k, a, b, o) {
  return o[k](a, b);
});

/**
 * Returns the result of the method `k` of object `o` applied to the values
 * `a`, `b`, and `c`.
 *
 * @summary Applies a method to three values.
 *
 * @example
 *   var person = {sayHi: function(a, b, c) { return ['Hi', a, b, c, '!'].join(' ') }}
 *   F.applyMethod3(sayHi, 'Ms', 'Jane', 'Appleseed', person) // Hi Ms Jane Appleseed!
 *
 * @curried
 * @function
 * @param k A string.
 * @param a A value.
 * @param b A value.
 * @param c A value.
 * @param o An object.
 * @returns A value.
 */
var applyMethod3 = curry(function (k, a, b, c, o) {
  return o[k](a, b, c);
});

/**
 * Returns a copy of the objects in the list of `os`.
 *
 * Properties with the same key will take precedence from right to left.
 *
 * The copy will have the *same* prototype as the *first* object in the list.
 *
 * @summary Creates a copy of an object.
 *
 * @example
 *   var person = {name: 'Jane', age: 20, city: 'Melbourne'}
 *   F.copy(person, {name: 'Steve'}) // {name: 'Steve', age: 20, city: 'Melbourne'}
 *
 * @function
 * @param os A list.
 * @returns A new object.
 */
var copy = variadic(function (o, ps) {
  return extend(Object.create(Object.getPrototypeOf(o)), [o].concat(ps));
});

/**
 * Returns the property at the key `k` in the object `o`.
 *
 * @summary Gets a property of an object.
 *
 * @example
 *   var person = {name: 'Jane', age: 20, city: 'Melbourne'}
 *   F.get('name', person) // 'Jane'
 *
 * @curried
 * @function
 * @param k A string.
 * @param o An object.
 * @returns A value.
 */
var get$1 = curry(function (k, o) {
  return o[k];
});

/**
 * Returns the property at the key path `ks` in the object `o`.
 *
 * @summary Gets a property of an object using a key path.
 *
 * @example
 *   var person = {name: 'Jane', age: 20, address: {city: 'Melbourne', country: 'Australia'}}
 *   F.getIn(['address', 'city'], person) // 'Melbourne'
 *
 * @curried
 * @function
 * @param ks A list.
 * @param o An object.
 * @returns A value.
 */
var getIn = curry(function (ks, o) {
  return ks.reduce(function (a, b) {
    return a !== undefined ? a[b] : undefined;
  }, o);
});

/**
 * Returns a copy of the object `o` with the property `k` set to the value `v`.
 *
 * @summary Sets a property of an object.
 *
 * @example
 *   var person = {name: 'Jane', age: 20, city: 'Melbourne'}
 *   F.set('name', 'Steve', person) // {name: 'Steve', age: 20, city: 'Melbourne'}
 *
 * @curried
 * @function
 * @param k A string.
 * @param v A value.
 * @param o An object.
 * @returns A new object.
 */
var set$1 = curry(function (k, v, o) {
  var p = {};
  p[k] = v;
  return copy(o, p);
});

/**
 * Returns a copy of the object `o` with the property `k` updated with the
 * function `f`.
 *
 * @summary Updates a property of an object with a function.
 *
 * @example
 *   var person = {name: 'Jane', age: 20, city: 'Melbourne'}
 *   F.update('age', F.inc, person) // {name: 'Jane', age: 21, city: 'Melbourne'}
 *
 * @curried
 * @function
 * @param k A string.
 * @param f A function.
 * @param o An object.
 * @returns A new object.
 */
var update = curry(function (k, f, o) {
  return set$1(k, f(get$1(k, o)), o);
});

/**
 * Returns a copy of the object `o` *with* the properties in the list of `ks`.
 *
 * @summary Picks properties of an object.
 *
 * @example
 *   var person = {name: 'Jane', age: 20, city: 'Melbourne'}
 *   F.pick(['name', 'age'], person) // {name: 'Jane', age: 20}
 *
 * @curried
 * @function
 * @param ks A list.
 * @param o An object.
 * @returns A new object.
 */
var pick = curry(function (ks, o) {
  return ks.reduce(function (p, k) {
    return set$1(k, get$1(k, o), p);
  }, {});
});

/**
 * Returns a copy of the object `o` *without* the properties in the list of
 * `ks`.
 *
 * @summary Omits properties of an object.
 *
 * @example
 *   var person = {name: 'Jane', age: 20, city: 'Melbourne'}
 *   F.omit(['name', 'age'], person) // {city: 'Melbourne'}
 *
 * @curried
 * @function
 * @param ks A list.
 * @param o An object.
 * @returns A new object.
 */
var omit = curry(function (ks, o) {
  return difference(keys(o), ks).reduce(function (p, k) {
    return set$1(k, get$1(k, o), p);
  }, {});
});

/**
 * Returns a list of key-value pairs for the properties of the object `o`.
 *
 * @summary Gets the key-value pairs of an object.
 *
 * @example
 *   var person = {name: 'Jane', age: 20, city: 'Melbourne'}
 *   F.pairs(person) // [['name', 'Jane'], ['age', 20], ['city', 'Melbourne']]
 *
 * @param o An object.
 * @returns A new list.
 */
function pairs(o) {
  return keys(o).map(function (k) {
    return [k, get$1(k, o)];
  });
}

/**
 * Returns a list of keys for the properties of the object `o`.
 *
 * @summary Gets the keys of an object.
 *
 * @example
 *   var person = {name: 'Jane', age: 20, city: 'Melbourne'}
 *   F.keys(person) // ['name', 'age', 'city']
 *
 * @param o An object.
 * @returns A new list.
 */
function keys(o) {
  return Object.keys(o);
}

/**
 * Returns a list of values for the properties of the object `o`.
 *
 * @summary Gets the values of an object.
 *
 * @example
 *   var person = {name: 'Jane', age: 20, city: 'Melbourne'}
 *   F.values(person) // ['Jane', 20, 'Melbourne']
 *
 * @param o An object.
 * @returns A new list.
 */
function values(o) {
  return keys(o).map(flip(get$1)(o));
}

/**
 * This module defines string functions.
 *
 * @module fkit/string
 * @summary Strings
 */

/**
 * @summary Converts a string to uppercase.
 *
 * @param s A string.
 * @returns A new string.
 */
function toUpper(s) {
  return s.toUpperCase();
}

/**
 * @summary Converts a string to lowercase.
 *
 * @param s A string.
 * @returns A new string.
 */
function toLower(s) {
  return s.toLowerCase();
}

/**
 * Returns the result of replacing term `a` with the string `b` in the string
 * `s`.
 *
 * @summary Replaces a term in a string.
 *
 * @example
 *   F.replace('r', 'z', 'bar') // baz
 *   F.replace(/$hello/, 'goodbye', 'hello world!') // goodbye world!
 *
 * @curried
 * @function
 * @param a A string or a regexp.
 * @param b A string.
 * @param s A string.
 * @returns A new string.
 */
var replace = curry(function (a, b, s) {
  return s.replace(a, b);
});

exports.flatten = flatten;
exports.id = id;
exports.apply = apply;
exports.apply2 = apply2;
exports.apply3 = apply3;
exports.applyRight = applyRight;
exports.compose = compose;
exports.flip = flip;
exports.always = always;
exports.curry = curry;
exports.uncurry = uncurry;
exports.unary = unary;
exports.binary = binary;
exports.variadic = variadic;
exports.tap = tap;
exports.equal = equal;
exports.notEqual = notEqual;
exports.compare = compare;
exports.isArray = isArray;
exports.isString = isString;
exports.isArrayOfStrings = isArrayOfStrings;
exports.mempty = mempty;
exports.pure = pure;
exports.toArray = toArray;
exports.toList = toList;
exports.length = length;
exports.empty = empty;
exports.append = append;
exports.prepend = prepend;
exports.surround = surround;
exports.head = head;
exports.last = last;
exports.init = init;
exports.tail = tail;
exports.inits = inits;
exports.tails = tails;
exports.array = array;
exports.string = string;
exports.pair = pair;
exports.range = range;
exports.replicate = replicate;
exports.sample = sample;
exports.shuffle = shuffle;
exports.flattenStrings = flattenStrings;
exports.concatWith = concatWith;
exports.concat = concat;
exports.concatMap = concatMap;
exports.fold = fold;
exports.foldRight = foldRight;
exports.scan = scan;
exports.scanRight = scanRight;
exports.maximum = maximum;
exports.minimum = minimum;
exports.maximumBy = maximumBy;
exports.minimumBy = minimumBy;
exports.sum = sum;
exports.product = product;
exports.map = map;
exports.reverse = reverse;
exports.intersperse = intersperse;
exports.elem = elem;
exports.elemIndex = elemIndex;
exports.elemIndices = elemIndices;
exports.find = find;
exports.findIndex = findIndex;
exports.findIndices = findIndices;
exports.filter = filter;
exports.partition = partition;
exports.all = all;
exports.any = any;
exports.isPrefixOf = isPrefixOf;
exports.isSuffixOf = isSuffixOf;
exports.isInfixOf = isInfixOf;
exports.nubBy = nubBy;
exports.nub = nub;
exports.unionBy = unionBy;
exports.union = union;
exports.intersectBy = intersectBy;
exports.intersect = intersect;
exports.differenceBy = differenceBy;
exports.difference = difference;
exports.removeBy = removeBy;
exports.remove = remove;
exports.cartesian = cartesian;
exports.subsequences = subsequences;
exports.permutations = permutations;
exports.sort = sort;
exports.sortBy = sortBy;
exports.take = take;
exports.drop = drop;
exports.takeWhile = takeWhile;
exports.dropWhile = dropWhile;
exports.splitAt = splitAt;
exports.span = span;
exports.group = group;
exports.groupBy = groupBy;
exports.zipWith = zipWith;
exports.zip = zip;
exports.unzip = unzip;
exports.and = and;
exports.or = or;
exports.not = not;
exports.branch = branch;
exports.whereAll = whereAll;
exports.whereAny = whereAny;
exports.add = add;
exports.sub = sub;
exports.mul = mul;
exports.div = div;
exports.mod = mod;
exports.max = max;
exports.min = min;
exports.clamp = clamp;
exports.between = between;
exports.negate = negate;
exports.eq = eq;
exports.neq = neq;
exports.gt = gt;
exports.gte = gte;
exports.lt = lt;
exports.lte = lte;
exports.even = even;
exports.odd = odd;
exports.inc = inc;
exports.dec = dec;
exports.randomInt = randomInt;
exports.randomFloat = randomFloat;
exports.applyMethod = applyMethod;
exports.applyMethod2 = applyMethod2;
exports.applyMethod3 = applyMethod3;
exports.copy = copy;
exports.get = get$1;
exports.getIn = getIn;
exports.set = set$1;
exports.update = update;
exports.pick = pick;
exports.omit = omit;
exports.pairs = pairs;
exports.keys = keys;
exports.values = values;
exports.toUpper = toUpper;
exports.toLower = toLower;
exports.replace = replace;

Object.defineProperty(exports, '__esModule', { value: true });

})));
